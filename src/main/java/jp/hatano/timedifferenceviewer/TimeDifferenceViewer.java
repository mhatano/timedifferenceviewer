/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package jp.hatano.timedifferenceviewer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.TimeZone;
import javax.swing.Timer;

/**
 *
 * @author hatan
 */
public class TimeDifferenceViewer extends javax.swing.JFrame {

    /**
     * Creates new form TimeDifferenceViewer
     */
    public TimeDifferenceViewer() {
        this.setTitle("Time Difference Viewer");
        initComponents();
        addTimer();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jCurrentTimeJST = new javax.swing.JLabel();
        jCurrentTimeIST = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldJST = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jTextFieldIST = new javax.swing.JTextField();
        jButtonConvertJST2IST = new javax.swing.JButton();
        jButtonConvertIST2JST = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(800, 600));
        setMinimumSize(new java.awt.Dimension(380, 200));
        setPreferredSize(new java.awt.Dimension(300, 300));
        setResizable(false);

        jPanel1.setMaximumSize(new java.awt.Dimension(400, 250));
        jPanel1.setMinimumSize(new java.awt.Dimension(300, 100));
        jPanel1.setPreferredSize(new java.awt.Dimension(380, 200));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Japan Standard Time :");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Indian Standard Time : ");

        jCurrentTimeJST.setBackground(new java.awt.Color(255, 255, 255));
        jCurrentTimeJST.setFont(new java.awt.Font("Consolas", 1, 24)); // NOI18N
        jCurrentTimeJST.setText("00:00:00");

        jCurrentTimeIST.setBackground(new java.awt.Color(255, 255, 255));
        jCurrentTimeIST.setFont(new java.awt.Font("Consolas", 1, 24)); // NOI18N
        jCurrentTimeIST.setText("00:00:00");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCurrentTimeIST, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCurrentTimeJST, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCurrentTimeJST)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jCurrentTimeIST)))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setMaximumSize(new java.awt.Dimension(780, 225));
        jPanel2.setMinimumSize(new java.awt.Dimension(300, 100));
        jPanel2.setPreferredSize(new java.awt.Dimension(620, 200));

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Japan Standard Time :");

        jTextFieldJST.setFont(new java.awt.Font("Cascadia Mono", 0, 14)); // NOI18N

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Indian Standard Time :");

        jTextFieldIST.setFont(new java.awt.Font("Cascadia Mono", 0, 14)); // NOI18N

        jButtonConvertJST2IST.setFont(new java.awt.Font("メイリオ", 0, 12)); // NOI18N
        jButtonConvertJST2IST.setText("▼");
        jButtonConvertJST2IST.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConvertJST2ISTActionPerformed(evt);
            }
        });

        jButtonConvertIST2JST.setFont(new java.awt.Font("メイリオ", 0, 12)); // NOI18N
        jButtonConvertIST2JST.setText("▲");
        jButtonConvertIST2JST.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConvertIST2JSTActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldIST, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldJST, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(8, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonConvertJST2IST, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53)
                .addComponent(jButtonConvertIST2JST, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTextFieldJST, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonConvertJST2IST, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonConvertIST2JST, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jTextFieldIST, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonConvertJST2ISTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConvertJST2ISTActionPerformed
        String jst = jTextFieldJST.getText();
        TimeFormatValidity validity = isTimeFormatValid(jst);
        if ( validity.isValid ) {
            jTextFieldJST.setText(jst = "%02d:%02d".formatted(validity.hPart,validity.mPart));
            String ist = getCorrespondingISTText(jst);
            jTextFieldIST.setText(ist);
        } else {
            jTextFieldIST.setText("");
        }
    }//GEN-LAST:event_jButtonConvertJST2ISTActionPerformed

    private void jButtonConvertIST2JSTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConvertIST2JSTActionPerformed
        String ist = jTextFieldIST.getText();
        TimeFormatValidity validity = isTimeFormatValid(ist);
        if ( validity.isValid ) {
            jTextFieldIST.setText(ist = "%02d:%02d".formatted(validity.hPart,validity.mPart));
            String jst = getCorrespondingJSTText(ist);
            jTextFieldJST.setText(jst);
        } else {
            jTextFieldJST.setText("");
        }
    }//GEN-LAST:event_jButtonConvertIST2JSTActionPerformed

    private record TimeFormatValidity(boolean isValid,int hPart,int mPart) {}
    
    private TimeFormatValidity isTimeFormatValid(String timeString) {
        if ( timeString == null || timeString.isEmpty() || !timeString.matches("[0-9][0-9]*:[0-9][0-9]*") ) {
            return new TimeFormatValidity(false,-1,-1);
        }
        int hPart = Integer.parseInt(timeString.substring(0,timeString.indexOf(':')));
        int mPart = Integer.parseInt(timeString.substring(timeString.indexOf(':') + 1));
        if ( hPart < 0 || 23 < hPart || mPart < 0 || 59 < mPart ) {
            return new TimeFormatValidity(false,-1,-1);
        }
        return new TimeFormatValidity(true,hPart,mPart);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TimeDifferenceViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TimeDifferenceViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TimeDifferenceViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TimeDifferenceViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new TimeDifferenceViewer().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonConvertIST2JST;
    private javax.swing.JButton jButtonConvertJST2IST;
    private javax.swing.JLabel jCurrentTimeIST;
    private javax.swing.JLabel jCurrentTimeJST;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField jTextFieldIST;
    private javax.swing.JTextField jTextFieldJST;
    // End of variables declaration//GEN-END:variables

    ActionListener timerRunner = null;
    private void addTimer() {
        int interval = 109;
        timerRunner = (ActionEvent e) -> {
            jCurrentTimeIST.setText(getCurrentISTText());
            jCurrentTimeJST.setText(getCurrentJSTText());
        };
        new Timer(interval,timerRunner).start();
    }
    
    private String getCurrentISTText() {
        return getCurrentText(istZoneID);
    }

    private String getCurrentText(ZoneId zone) {
        ZonedDateTime datetime = ZonedDateTime.now(zone);
        return datetime.format(DateTimeFormatter.ofPattern("HH:mm:ss z"));
    }
    
    private String getCurrentJSTText() {
        return getCurrentText(jstZoneID);
    }

    private String getCorrespondingISTText(String jst) {
        String ist = getCorrespondingText(istZoneID,jstZoneID,jst);
        return ist;
    }
    
    private String getCorrespondingJSTText(String ist) {
        String jst = getCorrespondingText(jstZoneID,istZoneID,ist);
        return jst;
    }

    ZoneId istZoneID = TimeZone.getTimeZone("IST").toZoneId();
    ZoneId jstZoneID = TimeZone.getTimeZone("JST").toZoneId();

    private String getCorrespondingText(ZoneId targetZoneID, ZoneId sourceZoneID, String timeString) {
        ZonedDateTime datetime = ZonedDateTime.of(LocalDateTime.of(LocalDate.now(),LocalTime.parse(timeString,DateTimeFormatter.ofPattern("HH:mm"))),sourceZoneID);
        ZonedDateTime convertedDateTime = datetime.withZoneSameInstant(targetZoneID);
        return convertedDateTime.format(DateTimeFormatter.ofPattern("HH:mm"));
    }
}
